name: incloud

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: 设置 Go 环境
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'  # 使用 Go 1.16 版本

      - name: 初始化 Go 模块
        run: go mod init joejoequte/automated-subdomain-takeover

      - name: Cache Go
        id: cache-go
        uses: actions/cache@v2
        with:
          path: /home/runner/go
          key: ${{ runner.os }}-go

      - name: 安装依赖项
        run: sudo apt-get install libpcap-dev

      - name: 安装 ProjectDiscovery 工具
        env:
          GO111MODULE: on
        run: |
          go get -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder
          go get -v github.com/projectdiscovery/dnsx/cmd/dnsx
          go get -v github.com/projectdiscovery/naabu/v2/cmd/naabu
          go get -v github.com/projectdiscovery/httpx/cmd/httpx
          go get -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei
          go get -v github.com/projectdiscovery/mapcidr/cmd/mapcidr
        shell: bash

      - name: 运行 SubFinder 进行被动 DNS 枚举
        run: |
          # 使用 SubFinder 枚举被动 DNS
          subfinder -dL input/domains.txt -config config/subfinder-config.yaml -o output/passive_subdomains.txt
        shell: bash

      - name: 运行 dnsx 进行有效的 DNS 筛选
        run: |
          # 使用 dnsx 进行有效的 DNS 筛选
          dnsx -l output/passive_subdomains.txt -t 50 | tee output/active_subdomains.txt
        shell: bash

      - name: 运行 naabu 检查前 1000 个端口
        run: |
          # 使用 naabu 检查前 1000 个端口
          naabu -iL output/active_subdomains.txt -rate 10000 -top-ports 1000 | tee output/active_ports.txt
        shell: bash

      - name: 运行 httpx 用于 HTTP 服务器探测
        run: |
          # 使用 httpx 进行 HTTP 服务器探测
          httpx -l output/active_ports.txt -title
          httpx -l output/active_ports.txt | tee output/active_urls.txt
        shell: bash

      - name: Xray 扫描 URLs
        run: |
          # 下载并设置 Xray 工具
          wget https://github.com/chaitin/xray/releases/download/1.7.1/xray_linux_amd64.zip
          unzip xray_linux_amd64.zip
          mv xray_linux_amd64 xray

          # 使用 Xray 扫描 URLs，并将结果合并到一个文件中
          set +e
          for i in $(cat output/active_urls.txt); do
            ./xray webscan --basic-crawler $i --html-output output/`date +%Y%m%d%H%M%S`.html
          done
          cat output/*.html >> output/xray.html
        shell: bash

      - name: 对输出结果进行排序
        run: |
          # 对所有输出结果文件进行排序
          find output -type f -exec sort {} -o {} \;
        shell: bash

      - name: 创建本地更改
        run: |
          # 将结果文件添加到 Git 中
          git add output/active_ports.txt
          git add output/active_urls.txt
          git add output/xray.html
        shell: bash

      - name: 提交结果到 GitHub
        run: |
          # 配置 Git 用户信息
          git config --local user.email "j.oejoequte@gmail.com"
          git config --global user.name "joejoequte"

          # 提交结果
          git commit -m "InCloud Report" -a --allow-empty
        env:
          GIT_COMMITTER_NAME: "joejoequte"
          GIT_COMMITTER_EMAIL: "j.oejoequte@gmail.com"
        shell: bash

      - name: 推送更改到 GitHub
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          branch: ${{ github.ref }}
